///
/// HybridPdfViewerSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <string>
#include <NitroModules/ArrayBuffer.hpp>
#include <vector>
#include <tuple>

namespace margelo::nitro::pdfviewer {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `PdfViewer`
   * Inherit this class to create instances of `HybridPdfViewerSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridPdfViewer: public HybridPdfViewerSpec {
   * public:
   *   HybridPdfViewer(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridPdfViewerSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridPdfViewerSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridPdfViewerSpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual void openPdf(const std::string& filePath) = 0;
      virtual void closePdf() = 0;
      virtual std::shared_ptr<ArrayBuffer> getTile(double pageNumber, double row, double column, double displayWidth, double tileSize, double scale) = 0;
      virtual double getPageCount(const std::string& filePath) = 0;
      virtual std::vector<std::tuple<double, double>> getAllPageDimensions(const std::string& filePath) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "PdfViewer";
  };

} // namespace margelo::nitro::pdfviewer
